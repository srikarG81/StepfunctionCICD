AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application.
Resources:
  WaitForApprovalTask:
    Type: AWS::Lambda::Function
    Properties:
      Handler: OrderOrchestration::OrderOrchestration.StepFunctionTasks::WaitForApprovalTask
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: dotnetcore3.1
      MemorySize: 256
      Timeout: 30
      Code:
        S3Bucket: demo-test-sri-101
        S3Key: WaitForApprovalTask
  ValidateCostTask:
    Type: AWS::Lambda::Function
    Properties:
      Handler: OrderOrchestration::OrderOrchestration.StepFunctionTasks::ValidateCostTask
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: dotnetcore3.1
      MemorySize: 256
      Timeout: 30
      Code:
        S3Bucket: demo-test-sri-101
        S3Key: ValidateCostTask
  ValidateOrderTask:
    Type: AWS::Lambda::Function
    Properties:
      Handler: OrderOrchestration::OrderOrchestration.StepFunctionTasks::ValidateOrderTask
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: dotnetcore3.1
      MemorySize: 256
      Timeout: 30
      Code:
        S3Bucket: demo-test-sri-101
        S3Key: ValidateOrderTask
  ProcessOrderTask:
    Type: AWS::Lambda::Function
    Properties:
      Handler: OrderOrchestration::OrderOrchestration.StepFunctionTasks::ProcessOrderTask
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: dotnetcore3.1
      MemorySize: 256
      Timeout: 30
      Code:
        S3Bucket: demo-test-sri-101
        S3Key: ValidateOrderTask
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionUri: state-machine.json
      RoleArn:
        Fn::GetAtt:
        - StateMachineRole
        - Arn
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: StepFunctionLambdaInvoke
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
Outputs: {}
